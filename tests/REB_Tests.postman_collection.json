{
	"info": {
		"name": "REB_Tests",
		"_postman_id": "c3b79648-70db-d530-1929-a315d5008c50",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Платежи и переводы",
			"description": "",
			"item": [
				{
					"name": "Конвертация",
					"description": "",
					"item": [
						{
							"name": "Ставка конвертации",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e324b6e-e520-4b2a-ac87-cd7054ca951d",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"from_amount\",\"to_amount\",\"exchange_rate\",\"first_currency\",\"second_currency\"],",
											"    \"properties\" :{",
											"        \"from_amount\" : {\"$ref\":\"#/definations/from_to_amount\"},",
											"        \"to_amount\" : {\"$ref\":\"#/definations/from_to_amount\"},",
											"        \"exchange_rate\" : {\"type\":\"number\"},",
											"        \"first_currency\" : {\"$ref\":\"#/definations/currency\"},",
											"        \"second_currency\" : {\"$ref\":\"#/definations/currency\"}",
											"    },",
											"    \"definations\" : {",
											"        \"from_to_amount\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"amount\", \"currency\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"number\"},",
											"                \"currency\":{\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/}",
											"            }",
											"        },",
											"        \"currency\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"amount\", \"currency\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"string\"},",
											"                \"currency\":{\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/}",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data, schema);",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"sum\": {\r\n\"amount\": 1000,\r\n\"currency\": \"RUR\"\r\n},\r\n\"from_currency\": \"RUR\",\r\n\"to_currency\": \"EUR\"\r\n}"
								},
								"url": "{{schema}}://{{host}}/bankapp/transactions/rates",
								"description": null
							},
							"response": []
						},
						{
							"name": "Курсы валют",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schemaGroups = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"id\", \"section_title\", \"rates\"],",
											"    \"properties\" :{",
											"        \"id\" : {\"type\":\"string\"},",
											"        \"section_title\" : {\"type\":\"string\"},",
											"        \"rates\" : {\"type\" : \"array\"}",
											"    }",
											"};",
											"",
											"var schemaRates = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"currency\", \"title\", \"sell\", \"sell_change\", \"buy\", \"buy_change\"],",
											"    \"properties\" : {",
											"        \"currency\" : {\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"sell\" : {\"type\":\"number\"},",
											"        \"sell_change\":{\"type\":\"string\"},",
											"        \"buy\":{\"type\":\"number\"},",
											"        \"buy_change\":{\"type\":\"string\"}",
											"    }",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            for(i=0; i<jsonData.data.groups.length;i++){",
											"                tests[\"Schema groups\" + i + \"is valid\"] = tv4.validate(jsonData.data.groups[i], schemaGroups);",
											"                for(j=0;j<jsonData.data.groups[i].rates.length;j++){",
											"                    tests[\"Schema groups\" + i + \"rates\" + j +  \"is valid\"] = tv4.validate(jsonData.data.groups[i].rates[j], schemaRates);",
											"                }",
											"            }",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}",
											"",
											"console.log(jsonData.data.groups[1]);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sum\": {\n    \"amount\": 1000,\n    \"currency\": \"RUR\"\n  },\n  \"from_currency\": \"RUR\",\n  \"to_currency\": \"USD\"\n}"
								},
								"url": "{{schema}}://{{host}}/bankapp/info/exchangerates_full",
								"description": null
							},
							"response": []
						},
						{
							"name": "Получить схему на открытие вклада",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var expectedCount = 6;",
											"var arrType = ['label_divider', 'money','label_divider', 'select_product_from','select_text','accept_terms'];",
											"",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"",
											"tests[\"Scheme detail cointains \" + expectedCount] = jsonData.data.deposit_list[0].field_list.scheme_field.length === expectedCount;",
											"",
											"tests[\"currency have STRING  type\"] = typeof(jsonData.data.deposit_list[0].currency &&  jsonData.data.deposit_list[0].field_list.scheme_field[1].money.currency) === \"string\";",
											"",
											"tests[\"currency Switcher is true\"] = jsonData.data.deposit_list[0].field_list.scheme_field[1].money.curency_switcher === true;",
											"",
											"var scheme_fields = jsonData.data.deposit_list[0].field_list.scheme_field;",
											"for(var i=1; i<=expectedCount; i++){",
											"    tests[\"Type \" + scheme_fields[i-1].type] = scheme_fields[i-1].type === arrType[i-1];",
											"}",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sum\": {\n    \"amount\": 1000,\n    \"currency\": \"RUR\"\n  },\n  \"from_currency\": \"RUR\",\n  \"to_currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "{{schema}}://{{host}}/bankapp/products/deposit?entry_point=exchange",
									"protocol": "{{schema}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"bankapp",
										"products",
										"deposit"
									],
									"query": [
										{
											"key": "entry_point",
											"value": "exchange",
											"equals": true
										}
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "Конвертация с открытием вклада",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"otp_operation\"],",
											"    \"properties\" :{",
											"        \"otp_operation\" : { \"$ref\" : \"#/definitions/otp\" },",
											"    },",
											"    \"definitions\":{",
											"        \"otp\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"attempt_id\"],",
											"            \"properties\": {",
											"                \"attempt_id\" : {\"typy\":\"string\"},",
											"                \"phone\" : {\"typy\":\"string\"},",
											"                \"timeout\" : {\"type\":\"number\"}    ",
											"            }",
											"                ",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data, schema);",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"field_list\": {\r\n    \"scheme_field\": [{\r\n      \"type\": \"LabelDivider\",\r\n      \"field_id\": \"label_divider\",\r\n      \"label_divider\": {\r\n        \"title\": \"Сумма счета\",\r\n        \"switcher\": false\r\n      }\r\n    }, {\r\n      \"type\": \"money\",\r\n      \"field_id\": \"money\",\r\n      \"value\": \"1200\",\r\n      \"money\": {\r\n        \"title\": \"Сумма\",\r\n        \"is_mandatory\": true,\r\n        \"is_locked\": false,\r\n        \"currency\": \"CNY\"\r\n      }\r\n    }, {\r\n      \"type\": \"LabelDivider\",\r\n      \"field_id\": \"label_divider2\",\r\n      \"label_divider\": {\r\n        \"title\": \"Источник\",\r\n        \"switcher\": false\r\n      }\r\n    }, {\r\n      \"type\": \"select_product_from\",\r\n      \"field_id\": \"select_product_from\",\r\n      \"value\": \"574522103\",\r\n      \"select_product_from\": {\r\n        \"title\": \"Источник\",\r\n        \"is_mandatory\": true,\r\n        \"is_locked\": true\r\n      }\r\n    }, {\r\n      \"type\": \"select_text\",\r\n      \"field_id\": \"select_region\",\r\n      \"value\": \"ENT_BRANCH_0000\",\r\n      \"select_text\": {\r\n        \"title\": \"Выберите регион:\",\r\n        \"is_mandatory\": true,\r\n        \"is_locked\": false,\r\n        \"value_list\": [{\r\n          \"title\": \"Москва\",\r\n          \"value\": \"ENT_BRANCH_0000\"\r\n        }],\r\n        \"hint\": \"\"\r\n      }\r\n    }, {\r\n      \"type\": \"accept_terms\",\r\n      \"field_id\": \"accept_terms_id\",\r\n      \"accept_terms\": {\r\n        \"link\": \"\",\r\n        \"title\": \"Я согласен на условия счета\"\r\n      }\r\n    }, {\r\n      \"type\": \"exchange\",\r\n      \"field_id\": \"exchange\",\r\n      \"exchange\": {\r\n        \"from_amount\": {\r\n          \"currency\": \"RUR\",\r\n          \"amount\": 0\r\n        },\r\n        \"to_amount\": {\r\n          \"currency\": \"CNY\",\r\n          \"amount\": 1200\r\n        },\r\n        \"first_currency\": {\r\n          \"currency\": \"CNY\",\r\n          \"amount\": \"1\"\r\n        },\r\n        \"second_currency\": {\r\n          \"currency\": \"RUR\",\r\n          \"amount\": \"NaN\"\r\n        }\r\n      }\r\n    }]\r\n  },\r\n  \"deposit_id\": \"exchange\",\r\n  \"scheme_id\": \"Exchange\",\r\n  \"interest\": 0.0,\r\n  \"currency\": \"CNY\"\r\n}"
								},
								"url": "{{schema}}://{{host}}/bankapp/products/deposit",
								"description": null
							},
							"response": []
						},
						{
							"name": "Получение схемы конвертации",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var expected = 'currency';",
											"var expectedCount = 7;",
											"var arrType = ['label_divider', 'select_product_from','label_divider','currency','select_product_to','label_divider','money'];",
											"",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"tests[\"Body cointains string: \" + expected] = responseBody.has(expected);",
											"",
											"tests[\"Scheme detail cointains \" + expectedCount] = jsonData.data.scheme_detail.field_list.scheme_field.length === expectedCount;",
											"console.log(jsonData.data.scheme_detail.field_list.scheme_field.length);",
											"",
											"",
											"var scheme_fields = jsonData.data.scheme_detail.field_list.scheme_field;",
											"for(var i=1; i<=expectedCount; i++){",
											"    tests[\"Type \" + scheme_fields[i-1].type] = scheme_fields[i-1].type === arrType[i-1];",
											"}",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {},
								"url": {
									"raw": "{{schema}}://{{host}}/bankapp/transactions/scheme_details?scheme_id=Exchange&scheme_type=exchange",
									"protocol": "{{schema}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"bankapp",
										"transactions",
										"scheme_details"
									],
									"query": [
										{
											"key": "scheme_id",
											"value": "Exchange",
											"equals": true
										},
										{
											"key": "scheme_type",
											"value": "exchange",
											"equals": true
										}
									]
								},
								"description": null
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "События",
			"description": "",
			"item": [
				{
					"name": "Шаблоны",
					"description": "",
					"item": [
						{
							"name": "Получение списка шаблонов платежей copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bac782e-344d-4684-9504-1ff54b49e871",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"scheme_id\", \"template_id\",\"title\", \"subtitle\",\"scheme_type\" ,\"sum\",\"field_list\"],",
											"    \"properties\" :{",
											"        \"scheme_id\" : {\"type\":\"string\"},",
											"        \"template_id\" : {\"type\":\"string\"},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"subtitle\" : {\"type\":\"string\"},",
											"        \"scheme_type\" : {\"type\":\"string\"},",
											"        \"sum\" : {\"$ref\":\"#/definitions/sum\"},",
											"        \"field_list\" :  {\"type\":\"object\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"sum\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"amount\", \"currency\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"number\"},",
											"                \"currency\":{\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            for(i=0;i<jsonData.data.scheme_list.scheme.length;i++){",
											"                tests[\"Schema is valid\" + i+1] = tv4.validate(jsonData.data.scheme_list.scheme[i], schema);",
											"            }",
											"            ",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{test_session}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": \"\"\n}"
								},
								"url": "{{schema}}://{{host}}/bankapp/templates",
								"description": null
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Автоплатежи",
					"description": "",
					"item": [
						{
							"name": "Получить список автоплатежей пользователя copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb127c71-694c-465e-ad8b-f6686e761ed6",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"scheme_id\", \"autopayment_id\",\"title\", \"subtitle\",\"sum\",\"next_payment_date\", \"field_list\"],",
											"    \"properties\" :{",
											"        \"scheme_id\" : {\"type\":\"string\"},",
											"        \"autopayment_id\" : {\"type\":\"string\"},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"subtitle\" : {\"type\":\"string\"},",
											"        \"sum\" : {\"$ref\":\"#/definitions/sum\"},",
											"        \"next_payment_date\" : {\"type\":\"string\", \"pattern\":/^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])T([0-1]\\d|2[0-3])(:[0-5]\\d){2}$/},",
											"        \"field_list\" :  {\"type\":\"object\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"sum\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"amount\", \"currency\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"number\"},",
											"                \"currency\":{\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            for(i=0;i<jsonData.data.scheme_list.scheme.length;i++){",
											"                tests[\"Schema is valid\" + \" \" + i] = tv4.validate(jsonData.data.scheme_list.scheme[i], schema);",
											"            }",
											"            ",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{test_session}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attempt_id\": \"\",\n  \"code\": \"\"\n}"
								},
								"url": "{{schema}}://{{host}}/bankapp/autopayments",
								"description": null
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Получение истории платежей copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1940db1-3f9b-4183-9bb4-f775fa73baf2",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var schema = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"id\", \"scheme_id\",\"title\", \"type\",\"description\",\"status\", \"date\",\"sum\",\"image_url\", \"product_id\"],",
									"    \"properties\" :{",
									"        \"id\" : {\"type\":\"number\"},",
									"        \"scheme_id\" : {\"type\":\"string\"},",
									"        \"title\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"description\" :{\"type\":\"string\"},",
									"        \"status\" : {\"type\":\"string\"},",
									"        \"date\" :  {\"type\":\"string\", \"pattern\":/^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])T([0-1]\\d|2[0-3])(:[0-5]\\d){2}$/},",
									"        \"sum\" : {\"$ref\":\"#/definitions/sum\"},",
									"        \"image_url\" : {\"type\":\"string\"},",
									"        \"product_id\" : {\"type\":\"number\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"sum\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"amount\", \"currency\"],",
									"            \"properties\" : {",
									"                \"amount\":{\"type\":\"number\"},",
									"                \"currency\":{\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"",
									"//status is 200",
									"if(responseCode.code === 200){",
									"    tests[\"Status code is 200\"] = true;",
									"    // content type of response",
									"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
									"    tests[\"Content-Type is application/json\"] = true;",
									"        // response is not empty",
									"        if(responseBody !== ''){",
									"            //schema validate",
									"            tests[\"Body of response is not empty\"] = true;",
									"            for(i=0;i<jsonData.data.transaction_list.transaction.length;i++){",
									"                tests[\"Schema is valid\" + \" \" + i] = tv4.validate(jsonData.data.transaction_list.transaction[i], schema);",
									"            }",
									"            ",
									"            //check response time",
									"            if(responseTime < 5000){",
									"                tests[\"Response time is less than 5000ms\"] = true;",
									"            }else{",
									"                tests[\"Response time is less than 5000ms\"] = false;",
									"        }",
									"        }else{",
									"            tests[\"Body of response is not empty\"] = false;",
									"        }",
									"    }else{",
									"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
									"}",
									"    ",
									"}else{",
									"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
									"}",
									"",
									"console.log(jsonData.data.transaction_list.transaction[3])",
									"console.log(jsonData.data.transaction_list.transaction[4])"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"\"\n}"
						},
						"url": {
							"raw": "{{schema}}://{{host}}/bankapp/transactions/history?product_id&begin_date&end_date&offset&limit",
							"protocol": "{{schema}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"bankapp",
								"transactions",
								"history"
							],
							"query": [
								{
									"key": "product_id",
									"value": "",
									"equals": false
								},
								{
									"key": "begin_date",
									"value": "",
									"equals": false
								},
								{
									"key": "end_date",
									"value": "",
									"equals": false
								},
								{
									"key": "offset",
									"value": "",
									"equals": false
								},
								{
									"key": "limit",
									"value": "",
									"equals": false
								}
							]
						},
						"description": null
					},
					"response": []
				}
			]
		}
	]
}