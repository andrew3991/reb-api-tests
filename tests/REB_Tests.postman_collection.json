{
	"info": {
		"_postman_id": "c3b79648-70db-d530-1929-a315d5008c50",
		"name": "REB_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Платежи и переводы",
			"description": "",
			"item": [
				{
					"name": "Конвертация",
					"description": "",
					"item": [
						{
							"name": "Ставка конвертации",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e324b6e-e520-4b2a-ac87-cd7054ca951d",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"from_amount\",\"to_amount\",\"exchange_rate\",\"first_currency\",\"second_currency\"],",
											"    \"properties\" :{",
											"        \"from_amount\" : {\"$ref\":\"#/definations/from_to_amount\"},",
											"        \"to_amount\" : {\"$ref\":\"#/definations/from_to_amount\"},",
											"        \"exchange_rate\" : {\"type\":\"number\"},",
											"        \"first_currency\" : {\"$ref\":\"#/definations/currency\"},",
											"        \"second_currency\" : {\"$ref\":\"#/definations/currency\"}",
											"    },",
											"    \"definations\" : {",
											"        \"from_to_amount\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"amount\", \"currency\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"number\"},",
											"                \"currency\":{\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/}",
											"            }",
											"        },",
											"        \"currency\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"amount\", \"currency\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"string\"},",
											"                \"currency\":{\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/}",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data, schema);",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"sum\": {\r\n\"amount\": 1000,\r\n\"currency\": \"RUR\"\r\n},\r\n\"from_currency\": \"RUR\",\r\n\"to_currency\": \"EUR\"\r\n}"
								},
								"url": "{{schema}}://{{host}}/bankapp/transactions/rates"
							},
							"response": []
						},
						{
							"name": "Курсы валют",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schemaGroups = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"id\", \"section_title\", \"rates\"],",
											"    \"properties\" :{",
											"        \"id\" : {\"type\":\"string\"},",
											"        \"section_title\" : {\"type\":\"string\"},",
											"        \"rates\" : {\"type\" : \"array\"}",
											"    }",
											"};",
											"",
											"var schemaRates = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"currency\", \"title\", \"sell\", \"sell_change\", \"buy\", \"buy_change\"],",
											"    \"properties\" : {",
											"        \"currency\" : {\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"sell\" : {\"type\":\"number\"},",
											"        \"sell_change\":{\"type\":\"string\"},",
											"        \"buy\":{\"type\":\"number\"},",
											"        \"buy_change\":{\"type\":\"string\"}",
											"    }",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            for(i=0; i<jsonData.data.groups.length;i++){",
											"                tests[\"Schema groups\" + i + \"is valid\"] = tv4.validate(jsonData.data.groups[i], schemaGroups);",
											"                for(j=0;j<jsonData.data.groups[i].rates.length;j++){",
											"                    tests[\"Schema groups\" + i + \"rates\" + j +  \"is valid\"] = tv4.validate(jsonData.data.groups[i].rates[j], schemaRates);",
											"                }",
											"            }",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}",
											"",
											"console.log(jsonData.data.groups[1]);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sum\": {\n    \"amount\": 1000,\n    \"currency\": \"RUR\"\n  },\n  \"from_currency\": \"RUR\",\n  \"to_currency\": \"USD\"\n}"
								},
								"url": "{{schema}}://{{host}}/bankapp/info/exchangerates_full"
							},
							"response": []
						},
						{
							"name": "Получить схему на открытие вклада",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e37762d-55e6-4842-a59f-181f87fc25c0",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"deposit_id\", \"type\", \"title\", \"refill_available\",\"withdraw_available\",\"description\",\"field_list\",\"hint\",\"interest\",\"currency\"],",
											"    \"properties\" :{",
											"        \"deposit_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"refill_available\" : {\"type\":\"boolean\"},",
											"        \"withdraw_available\": {\"type\":\"boolean\"},",
											"        \"field_list\" : {\"$ref\":\"#/definitions/field_list\"},",
											"        \"hint\" : {\"type\":\"string\"},",
											"        \"interest\" : {\"type\":\"number\"},",
											"        \"currency\" : {\"type\":\"string\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"field_list\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"scheme_field\"],",
											"            \"properties\" : {",
											"                \"scheme_field\":{\"type\":\"array\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"var label = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"label_divider\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"label_divider\" : {\"$ref\":\"#/definitions/label_divider\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"label_divider\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"title\"],",
											"            \"properties\" : {",
											"                \"title\":{\"type\":\"string\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"var money = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"money\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"money\" : {\"$ref\":\"#/definitions/money\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"money\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"is_locked\",\"is_mandatory\",\"title\",\"currency\",\"curency_switcher\"],",
											"            \"properties\" : {",
											"                \"is_locked\":{\"type\":\"boolean\"},",
											"                \"is_mandatory\":{\"type\":\"boolean\"},",
											"                \"title\":{\"type\":\"string\"},",
											"                \"currency\":{\"type\":\"string\"},",
											"                \"curency_switcher\":{\"type\":\"boolean\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"var select_product_from = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"select_product_from\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"select_product_from\" : {\"$ref\":\"#/definitions/select_product_from\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"select_product_from\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"title\", \"is_mandatory\", \"is_locked\"],",
											"            \"properties\" : {",
											"                \"title\":{\"type\":\"string\"},",
											"                \"is_mandatory\":{\"type\":\"boolean\"},",
											"                \"is_locked\":{\"type\":\"boolean\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"var select_text = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"select_text\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"select_text\" : {\"$ref\":\"#/definitions/select_text\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"select_text\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"title\", \"is_mandatory\", \"is_locked\",\"value_list\",\"hint\"],",
											"            \"properties\" : {",
											"                \"title\":{\"type\":\"string\"},",
											"                \"is_mandatory\":{\"type\":\"boolean\"},",
											"                \"is_locked\":{\"type\":\"boolean\"},",
											"                \"value_list\":{\"type\":\"array\"},",
											"                \"hint\":{\"type\":\"string\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"var accept_terms = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"accept_terms\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"accept_terms\" : {\"$ref\":\"#/definitions/accept_terms\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"accept_terms\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"title\", \"link\"],",
											"            \"properties\" : {",
											"                \"title\":{\"type\":\"string\"},",
											"                \"link\":{\"type\":\"string\",\"pattern\" : /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?/}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data.deposit_list[0], schema);",
											"            scheme_field = jsonData.data.deposit_list[0].field_list.scheme_field;",
											"            for(var i=0;i<jsonData.data.deposit_list[0].field_list.scheme_field.length;i++){",
											"                if(scheme_field[i].type == \"label_divider\"){",
											"                    tests[\"Schema for label \" + i + \" is valid\"] = tv4.validate(jsonData.data.deposit_list[0].field_list.scheme_field[i], label);",
											"                }else if(scheme_field[i].type == \"money\"){",
											"                    tests[\"Schema for money is valid\"] = tv4.validate(jsonData.data.deposit_list[0].field_list.scheme_field[i], money);",
											"                }else if(scheme_field[i].type == \"select_product_from\"){",
											"                    tests[\"Schema for select_product_from is valid\"] = tv4.validate(jsonData.data.deposit_list[0].field_list.scheme_field[i], select_product_from);",
											"                }else if(scheme_field[i].type == \"select_text\"){",
											"                    tests[\"Schema for select_text is valid\"] = tv4.validate(jsonData.data.deposit_list[0].field_list.scheme_field[i], select_text);",
											"                }else if(scheme_field[i].type == \"accept_terms\"){",
											"                    tests[\"Schema for accept_terms is valid\"] = tv4.validate(jsonData.data.deposit_list[0].field_list.scheme_field[i], accept_terms);",
											"                }",
											"            }",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}",
											"",
											"",
											" ",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sum\": {\n    \"amount\": 1000,\n    \"currency\": \"RUR\"\n  },\n  \"from_currency\": \"RUR\",\n  \"to_currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "{{schema}}://{{host}}/bankapp/products/deposit?entry_point=exchange",
									"protocol": "{{schema}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"bankapp",
										"products",
										"deposit"
									],
									"query": [
										{
											"key": "entry_point",
											"value": "exchange"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Конвертация с открытием вклада",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"otp_operation\"],",
											"    \"properties\" :{",
											"        \"otp_operation\" : { \"$ref\" : \"#/definitions/otp\" },",
											"    },",
											"    \"definitions\":{",
											"        \"otp\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"attempt_id\"],",
											"            \"properties\": {",
											"                \"attempt_id\" : {\"typy\":\"string\"},",
											"                \"phone\" : {\"typy\":\"string\"},",
											"                \"timeout\" : {\"type\":\"number\"}    ",
											"            }",
											"                ",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data, schema);",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"field_list\": {\r\n    \"scheme_field\": [{\r\n      \"type\": \"LabelDivider\",\r\n      \"field_id\": \"label_divider\",\r\n      \"label_divider\": {\r\n        \"title\": \"Сумма счета\",\r\n        \"switcher\": false\r\n      }\r\n    }, {\r\n      \"type\": \"money\",\r\n      \"field_id\": \"money\",\r\n      \"value\": \"1200\",\r\n      \"money\": {\r\n        \"title\": \"Сумма\",\r\n        \"is_mandatory\": true,\r\n        \"is_locked\": false,\r\n        \"currency\": \"CNY\"\r\n      }\r\n    }, {\r\n      \"type\": \"LabelDivider\",\r\n      \"field_id\": \"label_divider2\",\r\n      \"label_divider\": {\r\n        \"title\": \"Источник\",\r\n        \"switcher\": false\r\n      }\r\n    }, {\r\n      \"type\": \"select_product_from\",\r\n      \"field_id\": \"select_product_from\",\r\n      \"value\": \"574522103\",\r\n      \"select_product_from\": {\r\n        \"title\": \"Источник\",\r\n        \"is_mandatory\": true,\r\n        \"is_locked\": true\r\n      }\r\n    }, {\r\n      \"type\": \"select_text\",\r\n      \"field_id\": \"select_region\",\r\n      \"value\": \"ENT_BRANCH_0000\",\r\n      \"select_text\": {\r\n        \"title\": \"Выберите регион:\",\r\n        \"is_mandatory\": true,\r\n        \"is_locked\": false,\r\n        \"value_list\": [{\r\n          \"title\": \"Москва\",\r\n          \"value\": \"ENT_BRANCH_0000\"\r\n        }],\r\n        \"hint\": \"\"\r\n      }\r\n    }, {\r\n      \"type\": \"accept_terms\",\r\n      \"field_id\": \"accept_terms_id\",\r\n      \"accept_terms\": {\r\n        \"link\": \"\",\r\n        \"title\": \"Я согласен на условия счета\"\r\n      }\r\n    }, {\r\n      \"type\": \"exchange\",\r\n      \"field_id\": \"exchange\",\r\n      \"exchange\": {\r\n        \"from_amount\": {\r\n          \"currency\": \"RUR\",\r\n          \"amount\": 0\r\n        },\r\n        \"to_amount\": {\r\n          \"currency\": \"CNY\",\r\n          \"amount\": 1200\r\n        },\r\n        \"first_currency\": {\r\n          \"currency\": \"CNY\",\r\n          \"amount\": \"1\"\r\n        },\r\n        \"second_currency\": {\r\n          \"currency\": \"RUR\",\r\n          \"amount\": \"NaN\"\r\n        }\r\n      }\r\n    }]\r\n  },\r\n  \"deposit_id\": \"exchange\",\r\n  \"scheme_id\": \"Exchange\",\r\n  \"interest\": 0.0,\r\n  \"currency\": \"CNY\"\r\n}"
								},
								"url": "{{schema}}://{{host}}/bankapp/products/deposit"
							},
							"response": []
						},
						{
							"name": "Получение схемы конвертации",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ca59f30-faa3-49b8-b302-0f0554da9493",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"scheme_id\", \"type\", \"title\",\"field_list\",\"is_multistep\",\"image_url\"],",
											"    \"properties\" :{",
											"        \"scheme_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"field_list\" : {\"$ref\":\"#/definitions/field_list\"},",
											"        \"is_multistep\" : {\"type\":\"boolean\"},",
											"        \"image_url\" : {\"type\":\"string\",\"pattern\" : /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?/}",
											"    },",
											"    \"definitions\" : {",
											"        \"field_list\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"scheme_field\"],",
											"            \"properties\" : {",
											"                \"scheme_field\":{\"type\":\"array\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"var label = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"label_divider\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"label_divider\" : {\"$ref\":\"#/definitions/label_divider\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"label_divider\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"title\"],",
											"            \"properties\" : {",
											"                \"title\":{\"type\":\"string\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"var money = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"money\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"money\" : {\"$ref\":\"#/definitions/money\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"money\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"is_locked\",\"is_mandatory\",\"title\",\"currency\"],",
											"            \"properties\" : {",
											"                \"is_locked\":{\"type\":\"boolean\"},",
											"                \"is_mandatory\":{\"type\":\"boolean\"},",
											"                \"title\":{\"type\":\"string\"},",
											"                \"currency\":{\"type\":\"string\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"var select_product_from = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"select_product_from\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"select_product_from\" : {\"$ref\":\"#/definitions/select_product_from\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"select_product_from\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"title\", \"is_mandatory\", \"is_locked\"],",
											"            \"properties\" : {",
											"                \"title\":{\"type\":\"string\"},",
											"                \"is_mandatory\":{\"type\":\"boolean\"},",
											"                \"is_locked\":{\"type\":\"boolean\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"var select_product_to = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"select_product_to\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"select_product_to\" : {\"$ref\":\"#/definitions/select_product_to\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"select_product_to\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"title\", \"is_mandatory\", \"is_locked\"],",
											"            \"properties\" : {",
											"                \"title\":{\"type\":\"string\"},",
											"                \"is_mandatory\":{\"type\":\"boolean\"},",
											"                \"is_locked\":{\"type\":\"boolean\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"var currency = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"currency\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"currency\" : {\"$ref\":\"#/definitions/currency\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"currency\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"currency\", \"is_mandatory\", \"is_locked\"],",
											"            \"properties\" : {",
											"                \"currency\":{\"type\":\"array\"},",
											"                \"is_mandatory\":{\"type\":\"boolean\"},",
											"                \"is_locked\":{\"type\":\"boolean\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"    ",
											"};",
											"",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data.scheme_detail, schema);",
											"            scheme_field = jsonData.data.scheme_detail.field_list.scheme_field;",
											"            for(var i=0;i<scheme_field.length;i++){",
											"                if(scheme_field[i].type == \"label_divider\"){",
											"                    tests[\"Schema for label \" + i + \" is valid\"] = tv4.validate(scheme_field[i], label);",
											"                }else if(scheme_field[i].type == \"money\"){",
											"                    tests[\"Schema for money is valid\"] = tv4.validate(scheme_field[i], money);",
											"                }else if(scheme_field[i].type == \"select_product_from\"){",
											"                    tests[\"Schema for select_product_from is valid\"] = tv4.validate(scheme_field[i], select_product_from);",
											"                }else if(scheme_field[i].type == \"select_product_to\"){",
											"                    tests[\"Schema for select_product_to is valid\"] = tv4.validate(scheme_field[i], select_product_to);",
											"                }else if(scheme_field[i].type == \"currency\"){",
											"                    tests[\"Schema for currency is valid\"] = tv4.validate(scheme_field[i], currency);",
											"                }",
											"            }",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}",
											"",
											"",
											" ",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {},
								"url": {
									"raw": "{{schema}}://{{host}}/bankapp/transactions/scheme_details?scheme_id=Exchange&scheme_type=exchange",
									"protocol": "{{schema}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"bankapp",
										"transactions",
										"scheme_details"
									],
									"query": [
										{
											"key": "scheme_id",
											"value": "Exchange"
										},
										{
											"key": "scheme_type",
											"value": "exchange"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "В организацию",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Перевод по номеру телефона",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d1393d2-171d-4601-82cc-b70ed1b2c731",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var schema = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"scheme_id\", \"type\", \"title\",\"field_list\",\"is_multistep\",\"image_url\"],",
									"    \"properties\" :{",
									"        \"scheme_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"title\" : {\"type\":\"string\"},",
									"        \"field_list\" : {\"$ref\":\"#/definitions/field_list\"},",
									"        \"is_multistep\" : {\"type\":\"boolean\"},",
									"        \"image_url\" : {\"type\":\"string\",\"pattern\" : /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?/}",
									"    },",
									"    \"definitions\" : {",
									"        \"field_list\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"scheme_field\"],",
									"            \"properties\" : {",
									"                \"scheme_field\":{\"type\":\"array\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"",
									"var label = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"label_divider\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"label_divider\" : {\"$ref\":\"#/definitions/label_divider\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"label_divider\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"",
									"var phone = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"phone\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"phone\" : {\"$ref\":\"#/definitions/phone\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"phone\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\",\"is_mandatory\",\"is_locked\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"},",
									"                \"is_multistep\" : {\"type\":\"boolean\"},",
									"                \"is_locked\" : {\"type\":\"boolean\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"if(responseCode.code === 200){",
									"    tests[\"Status code is 200\"] = true;",
									"    // content type of response",
									"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
									"    tests[\"Content-Type is application/json\"] = true;",
									"        // response is not empty",
									"        if(responseBody !== ''){",
									"            //schema validate",
									"            tests[\"Body of response is not empty\"] = true;",
									"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data.scheme_detail, schema);",
									"            scheme_field = jsonData.data.scheme_detail.field_list.scheme_field;",
									"            for(var i=0;i<scheme_field.length;i++){",
									"                if(scheme_field[i].type == \"label_divider\"){",
									"                    tests[\"Schema for label \" + i + \" is valid\"] = tv4.validate(scheme_field[i], label);",
									"                }else if(scheme_field[i].type == \"phone\"){",
									"                    tests[\"Schema for phone is valid\"] = tv4.validate(scheme_field[i], phone);",
									"                }",
									"            }",
									"            //check response time",
									"            if(responseTime < 5000){",
									"                tests[\"Response time is less than 5000ms\"] = true;",
									"            }else{",
									"                tests[\"Response time is less than 5000ms\"] = false;",
									"        }",
									"        }else{",
									"            tests[\"Body of response is not empty\"] = false;",
									"        }",
									"    }else{",
									"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
									"}",
									"    ",
									"}else{",
									"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{schema}}://{{host}}/bankapp/transactions/scheme_details?scheme_id=TransferByPhone&scheme_type=transfer",
							"protocol": "{{schema}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"bankapp",
								"transactions",
								"scheme_details"
							],
							"query": [
								{
									"key": "scheme_id",
									"value": "TransferByPhone"
								},
								{
									"key": "scheme_type",
									"value": "transfer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "На любую карту",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b77e64e0-f980-4fbd-a37e-98ac8cded0c5",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var schema = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"scheme_id\", \"type\", \"title\",\"field_list\",\"is_multistep\",\"image_url\"],",
									"    \"properties\" :{",
									"        \"scheme_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"title\" : {\"type\":\"string\"},",
									"        \"field_list\" : {\"$ref\":\"#/definitions/field_list\"},",
									"        \"is_multistep\" : {\"type\":\"boolean\"},",
									"        \"image_url\" : {\"type\":\"string\",\"pattern\" : /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?/}",
									"    },",
									"    \"definitions\" : {",
									"        \"field_list\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"scheme_field\"],",
									"            \"properties\" : {",
									"                \"scheme_field\":{\"type\":\"array\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"var label = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"label_divider\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"label_divider\" : {\"$ref\":\"#/definitions/label_divider\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"label_divider\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"var money = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"money\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"money\" : {\"$ref\":\"#/definitions/money\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"money\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"is_locked\",\"is_mandatory\",\"title\",\"currency\"],",
									"            \"properties\" : {",
									"                \"is_locked\":{\"type\":\"boolean\"},",
									"                \"is_mandatory\":{\"type\":\"boolean\"},",
									"                \"title\":{\"type\":\"string\"},",
									"                \"currency\":{\"type\":\"string\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"var select_product_from = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"select_product_from\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"select_product_from\" : {\"$ref\":\"#/definitions/select_product_from\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"select_product_from\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\", \"is_mandatory\", \"is_locked\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"},",
									"                \"is_mandatory\":{\"type\":\"boolean\"},",
									"                \"is_locked\":{\"type\":\"boolean\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"var card_number = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"card_number\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"card_number\" : {\"$ref\":\"#/definitions/card_number\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"card_number\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\", \"is_mandatory\", \"is_locked\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"},",
									"                \"is_mandatory\":{\"type\":\"boolean\"},",
									"                \"is_locked\":{\"type\":\"boolean\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"",
									"",
									"",
									"//status is 200",
									"if(responseCode.code === 200){",
									"    tests[\"Status code is 200\"] = true;",
									"    // content type of response",
									"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
									"    tests[\"Content-Type is application/json\"] = true;",
									"        // response is not empty",
									"        if(responseBody !== ''){",
									"            //schema validate",
									"            tests[\"Body of response is not empty\"] = true;",
									"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data.scheme_detail, schema);",
									"            scheme_field = jsonData.data.scheme_detail.field_list.scheme_field;",
									"            for(var i=0;i<scheme_field.length;i++){",
									"                if(scheme_field[i].type == \"label_divider\"){",
									"                    tests[\"Schema for label \" + i + \" is valid\"] = tv4.validate(scheme_field[i], label);",
									"                }else if(scheme_field[i].type == \"money\"){",
									"                    tests[\"Schema for money is valid\"] = tv4.validate(scheme_field[i], money);",
									"                }else if(scheme_field[i].type == \"select_product_from\"){",
									"                    tests[\"Schema for select_product_from is valid\"] = tv4.validate(scheme_field[i], select_product_from);",
									"                }else if(scheme_field[i].type == \"card_number\"){",
									"                    tests[\"Schema for card_number is valid\"] = tv4.validate(scheme_field[i], card_number);",
									"                }",
									"            }",
									"            //check response time",
									"            if(responseTime < 5000){",
									"                tests[\"Response time is less than 5000ms\"] = true;",
									"            }else{",
									"                tests[\"Response time is less than 5000ms\"] = false;",
									"        }",
									"        }else{",
									"            tests[\"Body of response is not empty\"] = false;",
									"        }",
									"    }else{",
									"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
									"}",
									"    ",
									"}else{",
									"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
									"}",
									"",
									"",
									" ",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{schema}}://{{host}}/bankapp/transactions/scheme_details?scheme_id=TransferCardToCard&scheme_type=transfer",
							"protocol": "{{schema}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"bankapp",
								"transactions",
								"scheme_details"
							],
							"query": [
								{
									"key": "scheme_id",
									"value": "TransferCardToCard"
								},
								{
									"key": "scheme_type",
									"value": "transfer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Между счетами и картами",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bfe1c52-f455-4563-b8d1-fcb6c848b208",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var schema = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"scheme_id\", \"type\", \"title\",\"field_list\",\"is_multistep\",\"image_url\"],",
									"    \"properties\" :{",
									"        \"scheme_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"title\" : {\"type\":\"string\"},",
									"        \"field_list\" : {\"$ref\":\"#/definitions/field_list\"},",
									"        \"is_multistep\" : {\"type\":\"boolean\"},",
									"        \"image_url\" : {\"type\":\"string\",\"pattern\" : /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?/}",
									"    },",
									"    \"definitions\" : {",
									"        \"field_list\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"scheme_field\"],",
									"            \"properties\" : {",
									"                \"scheme_field\":{\"type\":\"array\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"var label = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"label_divider\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"label_divider\" : {\"$ref\":\"#/definitions/label_divider\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"label_divider\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"var money = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"money\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"money\" : {\"$ref\":\"#/definitions/money\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"money\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"is_locked\",\"is_mandatory\",\"title\",\"currency\"],",
									"            \"properties\" : {",
									"                \"is_locked\":{\"type\":\"boolean\"},",
									"                \"is_mandatory\":{\"type\":\"boolean\"},",
									"                \"title\":{\"type\":\"string\"},",
									"                \"currency\":{\"type\":\"string\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"var select_product_from = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"select_product_from\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"select_product_from\" : {\"$ref\":\"#/definitions/select_product_from\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"select_product_from\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\", \"is_mandatory\", \"is_locked\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"},",
									"                \"is_mandatory\":{\"type\":\"boolean\"},",
									"                \"is_locked\":{\"type\":\"boolean\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"var select_product_to = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"select_product_to\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"select_product_to\" : {\"$ref\":\"#/definitions/select_product_to\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"select_product_to\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\", \"is_mandatory\", \"is_locked\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"},",
									"                \"is_mandatory\":{\"type\":\"boolean\"},",
									"                \"is_locked\":{\"type\":\"boolean\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"",
									"",
									"",
									"//status is 200",
									"if(responseCode.code === 200){",
									"    tests[\"Status code is 200\"] = true;",
									"    // content type of response",
									"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
									"    tests[\"Content-Type is application/json\"] = true;",
									"        // response is not empty",
									"        if(responseBody !== ''){",
									"            //schema validate",
									"            tests[\"Body of response is not empty\"] = true;",
									"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data.scheme_detail, schema);",
									"            scheme_field = jsonData.data.scheme_detail.field_list.scheme_field;",
									"            for(var i=0;i<scheme_field.length;i++){",
									"                if(scheme_field[i].type == \"label_divider\"){",
									"                    tests[\"Schema for label \" + i + \" is valid\"] = tv4.validate(scheme_field[i], label);",
									"                }else if(scheme_field[i].type == \"money\"){",
									"                    tests[\"Schema for money is valid\"] = tv4.validate(scheme_field[i], money);",
									"                }else if(scheme_field[i].type == \"select_product_from\"){",
									"                    tests[\"Schema for select_product_from is valid\"] = tv4.validate(scheme_field[i], select_product_from);",
									"                }else if(scheme_field[i].type == \"select_product_to\"){",
									"                    tests[\"Schema for select_product_to is valid\"] = tv4.validate(scheme_field[i], select_product_to);",
									"                }",
									"            }",
									"            //check response time",
									"            if(responseTime < 5000){",
									"                tests[\"Response time is less than 5000ms\"] = true;",
									"            }else{",
									"                tests[\"Response time is less than 5000ms\"] = false;",
									"        }",
									"        }else{",
									"            tests[\"Body of response is not empty\"] = false;",
									"        }",
									"    }else{",
									"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
									"}",
									"    ",
									"}else{",
									"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
									"}",
									"",
									"",
									" ",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{schema}}://{{host}}/bankapp/transactions/scheme_details?scheme_id=TransferPaymentInstruments&scheme_type=transfer",
							"protocol": "{{schema}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"bankapp",
								"transactions",
								"scheme_details"
							],
							"query": [
								{
									"key": "scheme_id",
									"value": "TransferPaymentInstruments"
								},
								{
									"key": "scheme_type",
									"value": "transfer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Клиенту банка на счет",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41b40566-4cb6-449a-863c-1d0ea0933c9a",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var schema = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"scheme_id\", \"type\", \"title\",\"field_list\",\"is_multistep\",\"image_url\"],",
									"    \"properties\" :{",
									"        \"scheme_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"title\" : {\"type\":\"string\"},",
									"        \"field_list\" : {\"$ref\":\"#/definitions/field_list\"},",
									"        \"is_multistep\" : {\"type\":\"boolean\"},",
									"        \"image_url\" : {\"type\":\"string\",\"pattern\" : /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?/}",
									"    },",
									"    \"definitions\" : {",
									"        \"field_list\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"scheme_field\"],",
									"            \"properties\" : {",
									"                \"scheme_field\":{\"$ref\":\"#/definitions1/field_list\"}",
									"            }",
									"        }",
									"        ",
									"    },",
									"    \"definitions1\" : {",
									"        \"field_list\" : {",
									"            \"type\" : \"array\"",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"",
									"var group = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"group\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"group\" : {\"$ref\":\"#/definitions/group\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"group\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\",\"is_mandatory\",\"is_locked\",\"set\",\"subtype\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"},",
									"                \"is_locked\":{\"type\":\"boolean\"},",
									"                \"is_mandatory\":{\"type\":\"boolean\"},",
									"                \"set\":{\"type\":\"array\"},",
									"                \"subtype\":{\"type\":\"string\"}",
									"                ",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"var label = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"label_divider\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"label_divider\" : {\"$ref\":\"#/definitions/label_divider\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"label_divider\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"",
									"",
									"var fio_recipient__purpose_payment = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"text\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"text\" : {\"$ref\":\"#/definitions/text\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"text\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\", \"keyboard\",\"regexp_list\", \"is_mandatory\", \"is_locked\", \"hint\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"},",
									"                \"is_mandatory\":{\"type\":\"boolean\"},",
									"                \"is_locked\":{\"type\":\"boolean\"},",
									"                \"keyboard\":{\"type\":\"string\"},",
									"                \"regexp_list\":{\"type\":\"array\"},",
									"                \"hint\":{\"type\":\"string\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"var number_acc_recipient = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"text\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"text\" : {\"$ref\":\"#/definitions/text\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"text\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\", \"keyboard\",\"mask\", \"is_mandatory\", \"is_locked\", \"hint\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"},",
									"                \"is_mandatory\":{\"type\":\"boolean\"},",
									"                \"is_locked\":{\"type\":\"boolean\"},",
									"                \"keyboard\":{\"type\":\"string\"},",
									"                \"mask\":{\"type\":\"string\", \"enum\" : [\"[00000000000000000000]\"]},",
									"                \"hint\":{\"type\":\"string\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"",
									"",
									"var money = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"money\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"money\" : {\"$ref\":\"#/definitions/money\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"money\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"is_locked\",\"is_mandatory\",\"title\",\"currency\"],",
									"            \"properties\" : {",
									"                \"is_locked\":{\"type\":\"boolean\"},",
									"                \"is_mandatory\":{\"type\":\"boolean\"},",
									"                \"title\":{\"type\":\"string\"},",
									"                \"currency\":{\"type\":\"string\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"",
									"",
									"var select_product_from = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"field_id\", \"type\", \"select_product_from\"],",
									"    \"properties\" :{",
									"        \"field_id\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"select_product_from\" : {\"$ref\":\"#/definitions/select_product_from\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"select_product_from\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"title\", \"is_mandatory\", \"is_locked\"],",
									"            \"properties\" : {",
									"                \"title\":{\"type\":\"string\"},",
									"                \"is_mandatory\":{\"type\":\"boolean\"},",
									"                \"is_locked\":{\"type\":\"boolean\"}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"",
									"",
									"",
									"",
									"//status is 200",
									"if(responseCode.code === 200){",
									"    tests[\"Status code is 200\"] = true;",
									"    // content type of response",
									"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
									"    tests[\"Content-Type is application/json\"] = true;",
									"        // response is not empty",
									"        if(responseBody !== ''){",
									"            //schema validate",
									"            tests[\"Body of response is not empty\"] = true;",
									"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data.scheme_detail, schema);",
									"            scheme_field = jsonData.data.scheme_detail.field_list.scheme_field;",
									"            for(var i=0;i<scheme_field.length;i++){",
									"                if(scheme_field[i].type == \"label_divider\"){",
									"                    tests[\"Schema for label \" + i + \" is valid\"] = tv4.validate(scheme_field[i], label);",
									"                }else if(scheme_field[i].type == \"money\"){",
									"                    tests[\"Schema for money is valid\"] = tv4.validate(scheme_field[i], money);",
									"                }else if(scheme_field[i].type == \"select_product_from\"){",
									"                    tests[\"Schema for select_product_from is valid\"] = tv4.validate(scheme_field[i], select_product_from);",
									"                }else if(scheme_field[i].field_id == \"number_acc_recipient\"){",
									"                    tests[\"Schema for number_acc_recipient is valid\"] = tv4.validate(scheme_field[i], number_acc_recipient);",
									"                }else if(scheme_field[i].field_id == \"fio_recipient\" || scheme_field[i].field_id == \"purpose_payment\" ){",
									"                    tests[\"Schema for fio_recipient__purpose_payment is valid\"] = tv4.validate(scheme_field[i], fio_recipient__purpose_payment);",
									"                }else if(scheme_field[i].field_id == \"group\"){",
									"                    tests[\"Schema for group is valid\"] = tv4.validate(scheme_field[i], group);",
									"                }",
									"            }",
									"            //check response time",
									"            if(responseTime < 5000){",
									"                tests[\"Response time is less than 5000ms\"] = true;",
									"            }else{",
									"                tests[\"Response time is less than 5000ms\"] = false;",
									"        }",
									"        }else{",
									"            tests[\"Body of response is not empty\"] = false;",
									"        }",
									"    }else{",
									"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
									"}",
									"    ",
									"}else{",
									"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
									"}",
									"",
									"",
									" ",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{schema}}://{{host}}/bankapp/transactions/scheme_details?scheme_id=TransferAccountClient&scheme_type=transfer",
							"protocol": "{{schema}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"bankapp",
								"transactions",
								"scheme_details"
							],
							"query": [
								{
									"key": "scheme_id",
									"value": "TransferAccountClient"
								},
								{
									"key": "scheme_type",
									"value": "transfer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Пополнить с другой карты",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{schema}}://{{host}}/bankapp/transactions/scheme_details?scheme_id=TransferFromExternalCard&scheme_type=transfer",
							"protocol": "{{schema}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"bankapp",
								"transactions",
								"scheme_details"
							],
							"query": [
								{
									"key": "scheme_id",
									"value": "TransferFromExternalCard"
								},
								{
									"key": "scheme_type",
									"value": "transfer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Человеку на счет (физ лицу)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{schema}}://{{host}}/bankapp/transactions/scheme_details?scheme_id=TransferAnotherBankPh&scheme_type=transfer",
							"protocol": "{{schema}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"bankapp",
								"transactions",
								"scheme_details"
							],
							"query": [
								{
									"key": "scheme_id",
									"value": "TransferAnotherBankPh"
								},
								{
									"key": "scheme_type",
									"value": "transfer"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "События",
			"description": "",
			"item": [
				{
					"name": "Шаблоны",
					"description": "",
					"item": [
						{
							"name": "Получение списка шаблонов платежей copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a15547ce-2066-4e8f-ae80-68f5aea43a97",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"scheme_id\", \"template_id\",\"title\", \"subtitle\",\"scheme_type\" ,\"sum\",\"field_list\",\"is_multistep\",\"image_url\"],",
											"    \"properties\" :{",
											"        \"scheme_id\" : {\"type\":\"string\"},",
											"        \"template_id\" : {\"type\":\"string\"},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"subtitle\" : {\"type\":\"string\"},",
											"        \"scheme_type\" : {\"type\":\"string\"},",
											"        \"sum\" : {\"$ref\":\"#/definitions/sum\"},",
											"        \"field_list\" :  {\"type\":\"object\"},",
											"        \"is_multistep\" :  {\"type\":\"boolean\"},",
											"        \"image_url\" :  {\"type\":\"string\", \"pattern\" : /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?/}",
											"        ",
											"    },",
											"    \"definitions\" : {",
											"        \"sum\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"amount\", \"currency\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"number\"},",
											"                \"currency\":{\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            for(i=0;i<jsonData.data.scheme_list.scheme.length;i++){",
											"                tests[\"Schema is valid\" + i+1] = tv4.validate(jsonData.data.scheme_list.scheme[i], schema);",
											"            }",
											"            ",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": \"\"\n}"
								},
								"url": "{{schema}}://{{host}}/bankapp/templates"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Автоплатежи",
					"description": "",
					"item": [
						{
							"name": "Получить список автоплатежей пользователя copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb127c71-694c-465e-ad8b-f6686e761ed6",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"scheme_id\", \"autopayment_id\",\"title\", \"subtitle\",\"sum\",\"next_payment_date\", \"field_list\"],",
											"    \"properties\" :{",
											"        \"scheme_id\" : {\"type\":\"string\"},",
											"        \"autopayment_id\" : {\"type\":\"string\"},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"subtitle\" : {\"type\":\"string\"},",
											"        \"sum\" : {\"$ref\":\"#/definitions/sum\"},",
											"        \"next_payment_date\" : {\"type\":\"string\", \"pattern\":/^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])T([0-1]\\d|2[0-3])(:[0-5]\\d){2}$/},",
											"        \"field_list\" :  {\"type\":\"object\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"sum\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"amount\", \"currency\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"number\"},",
											"                \"currency\":{\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            for(i=0;i<jsonData.data.scheme_list.scheme.length;i++){",
											"                tests[\"Schema is valid\" + \" \" + i] = tv4.validate(jsonData.data.scheme_list.scheme[i], schema);",
											"            }",
											"            ",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attempt_id\": \"\",\n  \"code\": \"\"\n}"
								},
								"url": "{{schema}}://{{host}}/bankapp/autopayments"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Получение истории платежей copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1940db1-3f9b-4183-9bb4-f775fa73baf2",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var schema = {",
									"    \"type\" : \"object\",",
									"    \"required\" : [\"id\", \"scheme_id\",\"title\", \"type\",\"description\",\"status\", \"date\",\"sum\",\"image_url\", \"product_id\"],",
									"    \"properties\" :{",
									"        \"id\" : {\"type\":\"number\"},",
									"        \"scheme_id\" : {\"type\":\"string\"},",
									"        \"title\" : {\"type\":\"string\"},",
									"        \"type\" : {\"type\":\"string\"},",
									"        \"description\" :{\"type\":\"string\"},",
									"        \"status\" : {\"type\":\"string\"},",
									"        \"date\" :  {\"type\":\"string\", \"pattern\":/^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])T([0-1]\\d|2[0-3])(:[0-5]\\d){2}$/},",
									"        \"sum\" : {\"$ref\":\"#/definitions/sum\"},",
									"        \"image_url\" : {\"type\":\"string\"},",
									"        \"product_id\" : {\"type\":\"number\"}",
									"    },",
									"    \"definitions\" : {",
									"        \"sum\" : {",
									"            \"type\" : \"object\",",
									"            \"required\" : [\"amount\", \"currency\"],",
									"            \"properties\" : {",
									"                \"amount\":{\"type\":\"number\"},",
									"                \"currency\":{\"type\":\"string\", \"pattern\" : /^[A-Z]{3}/}",
									"            }",
									"        }",
									"        ",
									"    }",
									"};",
									"",
									"",
									"//status is 200",
									"if(responseCode.code === 200){",
									"    tests[\"Status code is 200\"] = true;",
									"    // content type of response",
									"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
									"    tests[\"Content-Type is application/json\"] = true;",
									"        // response is not empty",
									"        if(responseBody !== ''){",
									"            //schema validate",
									"            tests[\"Body of response is not empty\"] = true;",
									"            for(i=0;i<jsonData.data.transaction_list.transaction.length;i++){",
									"                tests[\"Schema is valid\" + \" \" + i] = tv4.validate(jsonData.data.transaction_list.transaction[i], schema);",
									"            }",
									"            ",
									"            //check response time",
									"            if(responseTime < 5000){",
									"                tests[\"Response time is less than 5000ms\"] = true;",
									"            }else{",
									"                tests[\"Response time is less than 5000ms\"] = false;",
									"        }",
									"        }else{",
									"            tests[\"Body of response is not empty\"] = false;",
									"        }",
									"    }else{",
									"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
									"}",
									"    ",
									"}else{",
									"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
									"}",
									"",
									"console.log(jsonData.data.transaction_list.transaction[3])",
									"console.log(jsonData.data.transaction_list.transaction[4])"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"\"\n}"
						},
						"url": {
							"raw": "{{schema}}://{{host}}/bankapp/transactions/history?product_id&begin_date&end_date&offset&limit",
							"protocol": "{{schema}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"bankapp",
								"transactions",
								"history"
							],
							"query": [
								{
									"key": "product_id",
									"value": null
								},
								{
									"key": "begin_date",
									"value": null
								},
								{
									"key": "end_date",
									"value": null
								},
								{
									"key": "offset",
									"value": null
								},
								{
									"key": "limit",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Деньги",
			"description": "",
			"item": [
				{
					"name": "Кредиты",
					"description": "",
					"item": [
						{
							"name": "Получение схемы планового погашения ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03e015d5-18fe-420d-afa7-ca5e46405966",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"scheme_id\", \"title\", \"type\", \"field_list\",\"is_multistep\"],",
											"    \"properties\" :{",
											"        \"scheme_id\" : {\"type\":\"string\"},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"field_list\" : {\"$ref\":\"#/definitions/field_list\"},",
											"        \"is_multistep\": {\"type\":\"boolean\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"field_list\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"scheme_field\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"array\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"var label = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"label_divider\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"label_divider\" : {\"$ref\":\"#/definitions/label_divider\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"label_divider\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"title\"],",
											"            \"properties\" : {",
											"                \"title\":{\"type\":\"string\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"var money = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"money\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"money\" : {\"$ref\":\"#/definitions/money\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"money\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"is_locked\",\"is_mandatory\",\"title\",\"currency\"],",
											"            \"properties\" : {",
											"                \"is_locked\":{\"type\":\"boolean\"},",
											"                \"is_mandatory\":{\"type\":\"boolean\"},",
											"                \"title\":{\"type\":\"string\"},",
											"                \"currency\":{\"type\":\"string\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"var money2 = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"money\",\"value\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"money\" : {\"$ref\":\"#/definitions/money\"},",
											"        \"value\" : {\"type\":\"string\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"money\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"is_locked\",\"is_mandatory\",\"title\",\"currency\"],",
											"            \"properties\" : {",
											"                \"is_locked\":{\"type\":\"boolean\"},",
											"                \"is_mandatory\":{\"type\":\"boolean\"},",
											"                \"title\":{\"type\":\"string\"},",
											"                \"currency\":{\"type\":\"string\"},",
											"                \"calculation\":{\"type\":\"boolean\",\"enum\":[false]}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"var select_product_from = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"select_product_from\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"select_product_from\" : {\"$ref\":\"#/definitions/select_product_from\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"select_product_from\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"title\", \"is_mandatory\", \"is_locked\"],",
											"            \"properties\" : {",
											"                \"title\":{\"type\":\"string\"},",
											"                \"is_mandatory\":{\"type\":\"boolean\"},",
											"                \"is_locked\":{\"type\":\"boolean\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"var select_product_to = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"field_id\", \"type\", \"select_product_to\"],",
											"    \"properties\" :{",
											"        \"field_id\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"select_product_to\" : {\"$ref\":\"#/definitions/select_product_to\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"select_product_to\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"title\", \"is_mandatory\", \"is_locked\"],",
											"            \"properties\" : {",
											"                \"title\":{\"type\":\"string\"},",
											"                \"is_mandatory\":{\"type\":\"boolean\"},",
											"                \"is_locked\":{\"type\":\"boolean\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data.scheme_detail, schema);",
											"            scheme_field = jsonData.data.scheme_detail.field_list.scheme_field;",
											"            for(var i=0;i<scheme_field.length;i++){",
											"                if(scheme_field[i].type == \"label_divider\"){",
											"                    tests[\"Schema for label \" + i + \" is valid\"] = tv4.validate(scheme_field[i], label);",
											"                }else if(scheme_field[i].type == \"money\"){",
											"                    if(scheme_field[i].field_id == \"money\"){",
											"                        tests[\"Schema for money is valid\"] = tv4.validate(scheme_field[i], money);",
											"                    }else{",
											"                        tests[\"Schema for money2 is valid\"] = tv4.validate(scheme_field[i], money2);",
											"                    }",
											"                }else if(scheme_field[i].type == \"select_product_from\"){",
											"                    tests[\"Schema for select_product_from is valid\"] = tv4.validate(scheme_field[i], select_product_from);",
											"                }else if(scheme_field[i].type == \"select_product_to\"){",
											"                    tests[\"Schema for select_product_to is valid\"] = tv4.validate(scheme_field[i], select_product_to);",
											"                }",
											"            }",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "{{schema}}://{{host}}/bankapp/transactions/scheme_details?product_to_id=2313375&scheme_id=ToLoan&scheme_type=transfer",
									"protocol": "{{schema}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"bankapp",
										"transactions",
										"scheme_details"
									],
									"query": [
										{
											"key": "product_to_id",
											"value": "2313375"
										},
										{
											"key": "scheme_id",
											"value": "ToLoan"
										},
										{
											"key": "scheme_type",
											"value": "transfer"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение детальной информации по кредиту",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f6b1a1e-4b10-4314-b2bf-3911370d9f78",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"id\", \"type\", \"status\", \"balance\", \"debt\", \"debt_payment\",\"overdraft_size\",\"icon_url\",\"title\",\"small_title\",\"pan\",\"issue_date\",\"expiration_date\",\"annual_interest\",\"next_payment\",\"next_payment_date\",\"is_default\",\"details\"],",
											"    \"properties\" :{",
											"        \"id\" : {\"type\":\"number\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"status\" : {\"type\":\"string\"},",
											"        \"balance\" : {\"type\":\"object\"},",
											"        \"debt\" : {\"type\":\"object\"},",
											"        \"debt_payment\" : {\"type\":\"object\"},",
											"        \"overdraft_size\" : {\"type\":\"object\"},",
											"        \"icon_url\" : {\"type\":\"string\"},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"small_title\" : {\"type\":\"string\"},",
											"        \"pan\" : {\"type\":\"string\"},",
											"        \"issue_date\" : {\"type\":\"string\"},",
											"        \"expiration_date\":{\"type\":\"string\"},",
											"        \"annual_interest\" : {\"type\":\"number\"},",
											"        \"next_payment\" : {\"type\":\"object\"},",
											"        \"next_payment_date\" : {\"type\":\"string\"},",
											"        \"is_default\" : {\"type\":\"boolean\"},",
											"        \"details\" : {\"type\":\"object\"}",
											"    }/*,",
											"    \"definitions\" : {",
											"        \"field_list\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"scheme_field\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"array\"}",
											"            }",
											"        }",
											"        ",
											"    }*/",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data.product, schema);",
											"            ",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "{{schema}}://{{host}}/bankapp/products/details?id=2313375&type=credit",
									"protocol": "{{schema}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"bankapp",
										"products",
										"details"
									],
									"query": [
										{
											"key": "id",
											"value": "2313375"
										},
										{
											"key": "type",
											"value": "credit"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Внеплановое погашение",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23e67352-00a7-460a-951c-21d8cdc44672",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"scheme_id\", \"title\", \"type\", \"field_list\",\"is_multistep\", \"image_url\"],",
											"    \"properties\" :{",
											"        \"scheme_id\" : {\"type\":\"string\"},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"field_list\" : {\"$ref\":\"#/definitions/field_list\"},",
											"        \"is_multistep\": {\"type\":\"boolean\"},",
											"        \"image_url\":{\"type\":\"string\"}",
											"    },",
											"    \"definitions\" : {",
											"        \"field_list\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"scheme_field\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"array\"}",
											"            }",
											"        }",
											"        ",
											"    }",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            tests[\"Schema is valid\"] = tv4.validate(jsonData.data.scheme_detail, schema);",
											"            ",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "{{schema}}://{{host}}/bankapp/transactions/scheme_details?scheme_id=Topup&scheme_type=transfer&product_to_id=2313375",
									"protocol": "{{schema}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"bankapp",
										"transactions",
										"scheme_details"
									],
									"query": [
										{
											"key": "scheme_id",
											"value": "Topup"
										},
										{
											"key": "scheme_type",
											"value": "transfer"
										},
										{
											"key": "product_to_id",
											"value": "2313375"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "История операций по кредиту",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40eb1a76-7f09-459c-ab4b-0b269900d5cc",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var schema = {",
											"    \"type\" : \"object\",",
											"    \"required\" : [\"id\", \"type\", \"title\", \"description\", \"status\", \"date\",\"sum\",\"can_repeat\",\"can_autopay\",\"can_template\",\"can_subscribe\",\"has_receipt\"],",
											"    \"properties\" :{",
											"        \"id\" : {\"type\":\"number\"},",
											"        \"type\" : {\"type\":\"string\"},",
											"        \"title\" : {\"type\":\"string\"},",
											"        \"description\" : {\"type\":\"string\"},",
											"        \"status\" : {\"type\":\"string\"},",
											"        \"date\" : {\"type\":\"string\"},",
											"        \"sum\" : {\"type\":\"object\"},",
											"        \"can_repeat\" : {\"type\":\"boolean\"},",
											"        \"can_autopay\" : {\"type\":\"boolean\"},",
											"        \"can_template\" : {\"type\":\"boolean\"},",
											"        \"can_subscribe\" : {\"type\":\"boolean\"},",
											"        \"has_receipt\" : {\"type\":\"boolean\"}",
											"    }/*,",
											"    \"definitions\" : {",
											"        \"field_list\" : {",
											"            \"type\" : \"object\",",
											"            \"required\" : [\"scheme_field\"],",
											"            \"properties\" : {",
											"                \"amount\":{\"type\":\"array\"}",
											"            }",
											"        }",
											"        ",
											"    }*/",
											"};",
											"",
											"",
											"//status is 200",
											"if(responseCode.code === 200){",
											"    tests[\"Status code is 200\"] = true;",
											"    // content type of response",
											"    if(postman.getResponseHeader(\"Content-Type\") === \"application/json\"){",
											"    tests[\"Content-Type is application/json\"] = true;",
											"        // response is not empty",
											"        if(responseBody !== ''){",
											"            //schema validate",
											"            tests[\"Body of response is not empty\"] = true;",
											"            for(j=0;j<jsonData.data.transaction_list.transaction.length;j++){",
											"                    tests[\"Schema groups  \"  + j +  \"  is valid\"] = tv4.validate(jsonData.data.transaction_list.transaction[j], schema);",
											"                }",
											"            ",
											"            //check response time",
											"            if(responseTime < 5000){",
											"                tests[\"Response time is less than 5000ms\"] = true;",
											"            }else{",
											"                tests[\"Response time is less than 5000ms\"] = false;",
											"        }",
											"        }else{",
											"            tests[\"Body of response is not empty\"] = false;",
											"        }",
											"    }else{",
											"    tests[\"Content-Type is \" + postman.getResponseHeader(\"Content-Type\")] = false;",
											"}",
											"    ",
											"}else{",
											"    tests[\"Response code is \" + responseCode.code.toString()] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "{{schema}}://{{host}}/bankapp/transactions/history?product_id=2313375&offset=0&limit=10",
									"protocol": "{{schema}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"bankapp",
										"transactions",
										"history"
									],
									"query": [
										{
											"key": "product_id",
											"value": "2313375"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Виртуальная карта",
					"description": "",
					"item": [
						{
							"name": "Получение схемы ВК",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sessionid",
										"value": "{{sessionid}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": "{{schema}}://{{host}}/bankapp/products/virtual"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Счета",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Вклады",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Карты",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Получение схемы для открытия накопительного счета",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": "{{schema}}://{{host}}/bankapp/products/deposit"
					},
					"response": []
				},
				{
					"name": "Запрос на открытие счета",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionid}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"field_list\": {\r\n\t\t\"scheme_field\": [{\r\n\t\t\t\"type\": \"select_text\",\r\n\t\t\t\"field_id\": \"select_region\",\r\n\t\t\t\"value\": \"ENT_BRANCH_0000\",\r\n\t\t\t\"select_text\": {\r\n\t\t\t\t\"title\": \"Выберите регион:\",\r\n\t\t\t\t\"is_mandatory\": true,\r\n\t\t\t\t\"is_locked\": false,\r\n\t\t\t\t\"value_list\": [{\r\n\t\t\t\t\t\"title\": \"Москва\",\r\n\t\t\t\t\t\"value\": \"ENT_BRANCH_0000\"\r\n\t\t\t\t}, {\r\n\t\t\t\t\t\"title\": \"Санкт-Петербург\",\r\n\t\t\t\t\t\"value\": \"ENT_BRANCH_8000\"\r\n\t\t\t\t}, {\r\n\t\t\t\t\t\"title\": \"Новосибирск\",\r\n\t\t\t\t\t\"value\": \"ENT_BRANCH_7000\"\r\n\t\t\t\t}, {\r\n\t\t\t\t\t\"title\": \"Самара\",\r\n\t\t\t\t\t\"value\": \"ENT_BRANCH_6000\"\r\n\t\t\t\t}, {\r\n\t\t\t\t\t\"title\": \"Челябинск\",\r\n\t\t\t\t\t\"value\": \"ENT_BRANCH_4000\"\r\n\t\t\t\t}],\r\n\t\t\t\t\"hint\": \"В следующих регионах Вы сможете получить бумажную версию договора счета\"\r\n\t\t\t}\r\n\t\t}, {\r\n\t\t\t\"type\": \"accept_terms\",\r\n\t\t\t\"field_id\": \"accept_terms_id\",\r\n\t\t\t\"accept_terms\": {\r\n\t\t\t\t\"link\": \"https://vb.rosevrobank.ru/information/usloviya-i-tarify\",\r\n\t\t\t\t\"title\": \"Согласен на условия открытия счета\"\r\n\t\t\t}\r\n\t\t}]\r\n\t},\r\n\t\"deposit_id\": \"Nakopitelny_schet\",\r\n\t\"interest\": 6.5,\r\n\t\"currency\": \"RUR\"\r\n}"
						},
						"url": "{{schema}}://{{host}}/bankapp/products/deposit"
					},
					"response": []
				}
			]
		}
	]
}
